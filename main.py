import random
import telebot
from englishDB import Database
from DATA_LISTS_TESTS import tests, TEST2, TEST3, TEST4, TEST5
# from config import TOKEN, ADMIN_ID
from time import sleep
from telebot import types
from keep_alive import keep_alive
import os
keep_alive()




# connect DB + create bot
db = Database('english.db')
bot = telebot.TeleBot(token=os.environ.get('TOKEN')) 
bot.remove_webhook()
ADMIN_ID = os.environ.get('ADMIN_ID')

test_mapping = {
    1: (TEST2, 2),
    2: (TEST3, 3),
    3: (TEST4, 4),
    4: (TEST5, 5)
}



# –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
def check_ban_status(user_id):
    if db.ban_exist(user_id):
        bot.send_message(user_id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return True
    return False

# tests commend for start testing open
@bot.message_handler(commands=['tests'])
def starting_test(message):
    user_id = message.chat.id

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    if check_ban_status(user_id):
        return
    if db.user_exist(user_id):
        current_status = db.get_status(user_id)
        if current_status and current_status != 5:
            bot.send_message(user_id, '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /next')
        else:
            db.set_status(user_id, 1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.reset_test_info(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            send_test_questions(user_id, tests)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
    else:
        bot.send_message(user_id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /start')
# tests commend for start testing close



# next commant for skip current text open 
@bot.message_handler(commands=['next'])
def next_stage(message):
    user_id = message.chat.id
    current_status = db.get_status(user_id)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    if check_ban_status(user_id):
        return
   
    if current_status in test_mapping:
        test, next_status = test_mapping[current_status]
        send_test_questions(user_id, test)
        db.set_status(user_id, next_status)
    else:
        bot.send_message(user_id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É\n–ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç /tests')
    
def send_test_questions(chat_id, test_data):
    random_test = random.sample(list(test_data.keys()), 5)
    markup = types.ReplyKeyboardRemove()
    correct_answers = db.get_correct_answers(chat_id)  # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

    for i in random_test:
        question_details = test_data[i]
        answer = question_details["answer"]
        options = question_details["options"]

        if answer not in options:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ: {question_details['question']}. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '{answer}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ –ª—Å –∞–¥–º–∏–Ω—É")
            continue

        correct_option_index = options.index(answer)

        poll_message = bot.send_poll(
            chat_id,
            question=f'{i} {question_details["question"]}',
            is_anonymous=False,
            options=options,
            type="quiz",
            correct_option_id=correct_option_index,
            reply_markup=markup
        )

        question_id = poll_message.poll.id
        correct_answers[question_id] = correct_option_index  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç


    db.set_correct_answers(chat_id, correct_answers)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    user_id = poll_answer.user.id
    selected_option_id = poll_answer.option_ids[0]
    question_id = poll_answer.poll_id
    correct_answers = db.get_correct_answers(user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    correct_option_id = correct_answers.get(question_id)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    if check_ban_status(user_id):
        return
    
    if correct_option_id is None:
        return

    if selected_option_id == correct_option_id:
        db.increment_correct_count(user_id)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    else:
        db.increment_incorrect_count(user_id)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

    correct_count = db.get_correct_count(user_id)
    incorrect_count = db.get_incorrect_count(user_id)
    total_questions = len(correct_answers)

    
    if correct_count + incorrect_count == total_questions:
        db.update_test_info(user_id, correct_count, incorrect_count)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
        if db.get_status(user_id) == 5:
            markupProfile = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
            markupProfile.add(btn)

            db.increment_test_count(user_id)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            bot.send_message(user_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect_count}', reply_markup=markupProfile)
            bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db.get_user_name(user_id)} —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–µ—à–∏–ª —Ç–µ—Å—Ç\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect_count}")

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("/next")
            markup.add(btn1)
            bot.send_message(user_id, f"{db.get_status(user_id)}/5\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ /next", reply_markup=markup)
# next commant for skip current text close




# ADMIN----------------------------------------------------------------------------------------------------------------ADMIN

# statistic user open
@bot.message_handler(commands=['statistic'])
def statistic(message):
    if message.chat.id == ADMIN_ID:
        users = db.get_all_users()
        if users:
            show_users_page(message.chat.id, users, 1)
        else:
            bot.send_message(ADMIN_ID, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        bot.send_message(message.chat.id, "–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def show_users_page(chat_id, users, page, message_id=None, users_per_page=10):
    start_index = (page - 1) * users_per_page
    end_index = start_index + users_per_page
    users_page = users[start_index:end_index]
    
    # user_list = "\n".join([f"<em><b>{user[1]}: —Å—Ç–∞—Ç—É—Å {user[2]},</b></em>\n–ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {user[3]},\n–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {user[4]}\n–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {user[5]}\n\n" for user in users_page])
    
    keyboard = types.InlineKeyboardMarkup()
    
    for user in users_page:
        user_button = types.InlineKeyboardButton(
            text=f"{user[1]}",
            callback_data=f"user_{user[0]}"
        )
        keyboard.add(user_button)
    
    # Add navigation buttons
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if end_index < len(users):
        navigation_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    
    if navigation_buttons:
        keyboard.add(*navigation_buttons)
    
    if message_id:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', parse_mode='HTML', reply_markup=keyboard)
    else:
        bot.send_message(chat_id, '–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', parse_mode='HTML', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('page_') or call.data.startswith('user_'))
def callback_user_navigation(call):
    if call.data.startswith('page_'):
        page = int(call.data.split('_')[1])
        users = db.get_all_users()
        show_users_page(call.message.chat.id, users, page, message_id=call.message.message_id)
    elif call.data.startswith('user_'):
        user_id = int(call.data.split('_')[1])
        user = db.get_user_by_id(user_id)
        if user:
            user_info = (f"–ò–º—è: {user[1]}\n"
                         f"ID: {user[0]}\n"
                         f"–°—Ç–∞—Ç—É—Å: {user[2]}\n"
                         f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {user[3]}\n"
                         f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {user[4]}\n"
                         f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {user[5]}")
            bot.send_message(call.message.chat.id, user_info)
        else:
            bot.send_message(call.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
# statistic user close


# ban user open

@bot.message_handler(commands=['ban'])
def ban_user(message):
    if message.chat.id == ADMIN_ID:
        
        command_parts = message.text.split()

        if len(command_parts) < 2:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ban <user_id>")
            return

        user_id = command_parts[1]

        if db.ban_exist(user_id):
            bot.send_message(ADMIN_ID, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        else:
            db.user_ban(user_id, True)
            user_name = db.get_user_name(user_id)
            bot.send_message(ADMIN_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    else:
        bot.send_message(message.chat.id, "–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        
        
@bot.message_handler(commands=['unban'])
def unban_user(message):
    if message.chat.id == ADMIN_ID:
        command_parts = message.text.split()

        if len(command_parts) < 2:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unban <user_id>")
            return

        user_id = command_parts[1]

        if not db.ban_exist(user_id):
            bot.send_message(ADMIN_ID, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        else:
            db.user_ban(user_id, False)
            user_name = db.get_user_name(user_id)
            bot.send_message(ADMIN_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')

    else:
        bot.send_message(message.chat.id, "–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
# ban user close


#--------------------------


# delete user functions open
@bot.message_handler(commands=['delete'])
def delete_user(message):
    if message.chat.id == ADMIN_ID:
        users = db.get_all_users()
        if users:
            show_delete_users_page(message.chat.id, users, 1)
        else:
            bot.send_message(ADMIN_ID, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        bot.send_message(message.chat.id, "–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def show_delete_users_page(chat_id, users, page, message_id=None, users_per_page=10):
    start_index = (page - 1) * users_per_page
    end_index = start_index + users_per_page
    users_page = users[start_index:end_index]
    
    # user_list = "\n".join([f"<em><b>{user[1]}: —Å—Ç–∞—Ç—É—Å {user[2]},</b></em>\n–ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {user[3]},\n–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {user[4]}\n–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {user[5]}\n\n" for user in users_page])
    
    keyboard = types.InlineKeyboardMarkup()
    
    for user in users_page:
        delete_button = types.InlineKeyboardButton(
            text=f"–£–¥–∞–ª–∏—Ç—å {user[1]}",
            callback_data=f"confirm_delete_{user[0]}"
        )
        keyboard.add(delete_button)
    
    # Add navigation buttons
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_page_{page-1}"))
    if end_index < len(users):
        navigation_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"delete_page_{page+1}"))
    
    if navigation_buttons:
        keyboard.add(*navigation_buttons)
    
    if message_id:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í—ã–±–∏—Ä–µ—Ç–µ –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', parse_mode='HTML', reply_markup=keyboard)
    else:
        bot.send_message(chat_id, '–í—ã–±–∏—Ä–µ—Ç–µ –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', parse_mode='HTML', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_') or call.data.startswith('delete_page_') or call.data.startswith('delete_user_'))
def callback_delete_user(call):
    if call.data.startswith('delete_page_'):
        page = int(call.data.split('_')[2])
        users = db.get_all_users()
        show_delete_users_page(call.message.chat.id, users, page, message_id=call.message.message_id)
    elif call.data.startswith('confirm_delete_'):
        user_id = int(call.data.split('_')[2])
        user = db.get_user_by_id(user_id)
        if user:
            confirm_delete_user(call.message.chat.id, user, call.message.message_id)
    elif call.data.startswith('delete_user_'):
        action, user_id = call.data.split('_')[2], int(call.data.split('_')[3])
        if action == 'yes':
            db.delete_user(user_id)
            bot.answer_callback_query(call.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        elif action == 'no':
            bot.answer_callback_query(call.id, text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        users = db.get_all_users()
        show_delete_users_page(call.message.chat.id, users, 1, message_id=call.message.message_id)

def confirm_delete_user(chat_id, user, message_id):
    keyboard = types.InlineKeyboardMarkup()
    yes_button = types.InlineKeyboardButton("–î–∞", callback_data=f"delete_user_yes_{user[0]}")
    no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"delete_user_no_{user[0]}")
    keyboard.add(yes_button, no_button)
    
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[1]}?",
        reply_markup=keyboard
    )

# delete user functions close


# start + register user function open
@bot.message_handler(commands=['start'])
def welcome(message):
    user_id = message.chat.id
    markupProfile = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    markupProfile.add(btn)
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    if check_ban_status(user_id):
        return
    
    if user_id == ADMIN_ID:
        bot.send_message(ADMIN_ID, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å')
    else:
        
        if db.user_exist(user_id):
            
            bot.send_message(user_id, f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ /tests', reply_markup=markupProfile)
        else:
            bot.send_sticker(user_id, 'CAACAgIAAxkBAAEFVcRmP1fYktDsuSp917lB9SgvmSRBWgACNhYAAnJroEul2k1dhz9kKTUE')
            bot.send_message(user_id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.')
            bot.send_message(user_id, '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ò–º—è|–§–∞–º–∏–ª–∏—è|–ì—Ä—É–ø–ø–∞:')
            bot.register_next_step_handler(message, welcome_handler)


def welcome_handler(message):
    user_id = message.chat.id
    markupProfile = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    markupProfile.add(btn)
    
    if user_id == ADMIN_ID:
        bot.send_message(ADMIN_ID, '–Ø –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–µ–∫—Å—Ç')
    else:
        name = message.text
        db.add_user(user_id, name)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        bot.send_sticker(user_id, 'CAACAgIAAxkBAAEFVfdmP1uexp-GV72cpq7a-hHHhwUZrwACgxkAAiY7mEhfKtXAStm9azUE')
        bot.send_message(user_id, f'–°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ /tests', reply_markup=markupProfile)
        chat_id = message.chat.id
        message_id = message.message_id
        for i in range(4):
            bot.delete_message(chat_id, message_id - i)
# start + register user function close



# text handler open
@bot.message_handler(content_types=['text'])
def text(message):
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    markupProfile = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
    btn = types.KeyboardButton("üîô–ù–∞–∑–∞–¥")
    markupProfile.add(btn, btn1)
    
    if check_ban_status(message.chat.id):
        return
    
    
    if (message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'):  
        bot.send_message(message.chat.id, f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüÜî ID: {message.chat.id}\nüë§ –ò–º—è: {db.get_user_name(message.chat.id)}', reply_markup=markupProfile)
    elif(message.text == 'üîô–ù–∞–∑–∞–¥'):
        welcome(message)
    elif (message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'):
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
        bot.register_next_step_handler(message, handle_change_name)
        
    elif(db.user_exist(message.chat.id)):
         bot.send_message(message.chat.id, '–Ø –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–µ–∫—Å—Ç')
    else:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start')

def handle_change_name(message):
    markupProfile = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    markupProfile.add(btn)
    if message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' or message.text ==  "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è" or message.text == 'üîô–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è!!')
    else:
        user_id = message.chat.id
        new_name = message.text
        db.update_user_name(user_id, new_name)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(user_id, f'–í–∞—à–µ –∏–º—è –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}.', reply_markup=markupProfile)

# text handler close



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
while True:
    try:
        bot.polling(none_stop=True)
    except telebot.apihelper.ApiTelegramException as e:
        if e.result.status_code == 502:
            print("Got Bad Gateway error. Retrying in 15 seconds...")
            sleep(15)
        else:
            raise e
    except Exception as e:
        print(f"Unexpected error: {e}. Retrying in 15 seconds...")
        sleep(15)